import os
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# ====== –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
TOKEN = os.getenv("TOKEN")
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE")
CHANNEL_ID = os.getenv("CHANNEL_ID")
MODE = os.getenv("MODE", "polling")
PORT = int(os.getenv("PORT", 10000))

if not TOKEN:
    raise RuntimeError("ENV TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ TOKEN –≤ Render ‚Üí Environment.")

# ====== –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç ======
quotes = [
    "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –Ω–µ —á—Ç–æ-—Ç–æ, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è, –∞ —á—Ç–æ-—Ç–æ, —á—Ç–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
    "–õ—é–±–æ–≤—å ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–µ—â—å, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Ç—ë—Ç, –µ—Å–ª–∏ –µ—ë —Ç—Ä–∞—Ç–∏—Ç—å. ‚Äî –ê–Ω—Ç—É–∞–Ω –¥–µ –°–µ–Ω—Ç-–≠–∫–∑—é–ø–µ—Ä–∏",
    "–°–µ—Ä–¥—Ü–µ, –∫–æ—Ç–æ—Ä–æ–µ –ª—é–±–∏—Ç, –≤–µ—á–Ω–æ –º–æ–ª–æ–¥–æ. ‚Äî –ì—Ä–µ—á–µ—Å–∫–∞—è –ø–æ—Å–ª–æ–≤–∏—Ü–∞",
    "–õ—é–±–∏—Ç—å ‚Äî –∑–Ω–∞—á–∏—Ç –≤–∏–¥–µ—Ç—å —á—É–¥–æ, –Ω–µ–≤–∏–¥–∏–º–æ–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö. ‚Äî –§—Ä–∞–Ω—Å—É–∞ –ú–æ—Ä–∏–∞–∫",
    "–í –ª—é–±–≤–∏ –Ω–µ—Ç —Å—Ç—Ä–∞—Ö–∞, –Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–∞—è –ª—é–±–æ–≤—å –∏–∑–≥–æ–Ω—è–µ—Ç —Å—Ç—Ä–∞—Ö. ‚Äî 1 –ò–æ–∞–Ω–Ω–∞ 4:18"
]

# ====== –ö–Ω–æ–ø–∫–∏ ======
def main_keyboard():
    return ReplyKeyboardMarkup(
        [["–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è"]],
        resize_keyboard=True
    )

def quote_action_keyboard():
    return ReplyKeyboardMarkup(
        [["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", "–ü–æ–º–µ–Ω—è—Ç—å —Ü–∏—Ç–∞—Ç—É"]],
        resize_keyboard=True
    )

# ====== –•–µ–Ω–¥–ª–µ—Ä—ã ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"[LOG] /start –æ—Ç {update.effective_user.id}")
    await update.message.reply_text("–ù–∞–∂–º–∏ ¬´–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É", reply_markup=main_keyboard())

async def quote_of_the_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quote = random.choice(quotes)
    context.user_data["current_quote"] = quote
    print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–ª—É—á–∏–ª —Ü–∏—Ç–∞—Ç—É: {quote}")
    await update.message.reply_text(quote, reply_markup=quote_action_keyboard())

async def send_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quote = context.user_data.get("current_quote")
    if not quote:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ ¬´–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è¬ª!")
        return
    await context.bot.send_message(chat_id=CHANNEL_ID, text=quote)
    print(f"[LOG] –¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}: {quote}")
    await update.message.reply_text("–¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª!")

async def change_quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quote = random.choice(quotes)
    context.user_data["current_quote"] = quote
    print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–º–µ–Ω—è–ª —Ü–∏—Ç–∞—Ç—É –Ω–∞: {quote}")
    await update.message.reply_text(quote, reply_markup=quote_action_keyboard())

async def log_all_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ª–∞–¥–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç"""
    print("[DEBUG] –ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç:", update)

# ====== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ======
def build_app():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è$"), quote_of_the_day))
    app.add_handler(MessageHandler(filters.Regex("^–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª$"), send_to_channel))
    app.add_handler(MessageHandler(filters.Regex("^–ü–æ–º–µ–Ω—è—Ç—å —Ü–∏—Ç–∞—Ç—É$"), change_quote))
    app.add_handler(MessageHandler(filters.ALL, log_all_updates))  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë

    return app

if __name__ == "__main__":
    app = build_app()

    print(f"=== DEBUG: ENV VARS ===")
    print(f"TOKEN: {TOKEN}")
    print(f"WEBHOOK_BASE: {WEBHOOK_BASE}")
    print(f"CHANNEL_ID: {CHANNEL_ID}")
    print(f"MODE: {MODE}")
    print(f"PORT: {PORT}")
    print("=======================")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –≤ –∫–∞–Ω–∞–ª –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        app.bot.send_message(chat_id=CHANNEL_ID, text="ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã!")
        print("[LOG] –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –≤ –∫–∞–Ω–∞–ª: {e}")

    if MODE == "webhook":
        print("[LOG] –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ WEBHOOK")
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TOKEN,
            webhook_url=f"{WEBHOOK_BASE}/{TOKEN}"
        )
    else:
        print("[LOG] –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ POLLING")
        app.run_polling()