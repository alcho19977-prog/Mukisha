import os
import random
from typing import Dict, List, Optional

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters
)

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1002701059389"))  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞
QUOTES_FILE = os.getenv("QUOTES_FILE", "quotes.txt")          # —Ñ–∞–π–ª —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ (–ø–æ —Å—Ç—Ä–æ–∫–µ)
TOKEN = os.getenv("TOKEN")                                    # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –ü–∞–º—è—Ç—å ¬´–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤¬ª –Ω–∞ —á–∞—Ç
chat_state: Dict[int, Dict[str, object]] = {}
QUOTES: List[str] = []


# ===== –ó–ê–ì–†–£–ó–ö–ê –¶–ò–¢–ê–¢ =====
def load_quotes() -> List[str]:
    """–ß–∏—Ç–∞–µ—Ç —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ). –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è."""
    if not os.path.exists(QUOTES_FILE):
        return [
            "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –∂–∏–∑–Ω—å, –∏ –≤—Å—ë, —á—Ç–æ —è –ø–æ–Ω–∏–º–∞—é –≤ –∂–∏–∑–Ω–∏, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ –ª—é–±–ª—é. ‚Äî –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",
            "–õ—é–±–∏—Ç—å ‚Äî –∑–Ω–∞—á–∏—Ç –≤–∏–¥–µ—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Ç–∞–∫–∏–º, –∫–∞–∫–∏–º –µ–≥–æ –∑–∞–¥—É–º–∞–ª –ë–æ–≥. ‚Äî –§. –ú. –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
            "–í–µ–ª–∏—á–∞–π—à–µ–µ —Å—á–∞—Å—Ç—å–µ –≤ –∂–∏–∑–Ω–∏ ‚Äî —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —á—Ç–æ —Ç–µ–±—è –ª—é–±—è—Ç. ‚Äî –í–∏–∫—Ç–æ—Ä –ì—é–≥–æ",
            "–ë—ã—Ç—å –ª—é–±–∏–º—ã–º –¥–∞—ë—Ç —Å–∏–ª—É, –∞ –ª—é–±–∏—Ç—å –¥–∞—ë—Ç –º—É–∂–µ—Å—Ç–≤–æ. ‚Äî –õ–∞–æ-—Ü–∑—ã",
            "–ú—ã –ª—é–±–∏–º –Ω–µ –ø–æ—Ç–æ–º—É, —á—Ç–æ –Ω–∞—à–ª–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∞ –ø–æ—Ç–æ–º—É, —á—Ç–æ –Ω–∞—É—á–∏–ª–∏—Å—å –≤–∏–¥–µ—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ –≤ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–º. ‚Äî –°—ç–º –ö–∏–Ω",
        ]
    with open(QUOTES_FILE, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]


# ===== –õ–û–ì–ò–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –¶–ò–¢–ê–¢ =====
def next_quote_for(chat_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø–æ —á–∞—Ç—É. –ü—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ ‚Äî –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –∑–∞–Ω–æ–≤–æ."""
    state = chat_state.get(chat_id)
    if not state or not state.get("order"):
        order = list(range(len(QUOTES)))
        random.shuffle(order)
        chat_state[chat_id] = {"order": order, "idx": 0}
        state = chat_state[chat_id]

    order: List[int] = state["order"]  # type: ignore
    idx: int = state["idx"]            # type: ignore

    q = QUOTES[order[idx]]
    idx += 1
    if idx >= len(order):
        random.shuffle(order)
        idx = 0
    state["idx"] = idx
    return q


# ===== –ö–ù–û–ü–ö–ò =====
def kb_start() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üóìÔ∏è –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è", callback_data="get")]])


def kb_actions() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üì£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="send"),
        InlineKeyboardButton("üîÅ –ü–æ–º–µ–Ω—è—Ç—å —Ü–∏—Ç–∞—Ç—É", callback_data="change"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã", callback_data="reload"),
    ]])


# ===== –ü–û–ö–ê–ó –¶–ò–¢–ê–¢–´ =====
async def show_quote(chat_id: int, context: ContextTypes.DEFAULT_TYPE, quote: Optional[str] = None):
    if quote is None:
        quote = next_quote_for(chat_id)
    context.chat_data["current_quote"] = quote
    await context.bot.send_message(chat_id=chat_id, text=quote, reply_markup=kb_actions())


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
async def start_like(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ—é–±–æ–π —Ç–µ–∫—Å—Ç (–∏ /start) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è."""
    await update.effective_message.reply_text(
        "–ù–∞–∂–º–∏ ¬´–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è¬ª ‚Äî –ø—Ä–∏—à–ª—é —Ü–∏—Ç–∞—Ç—É –∏ –ø—Ä–µ–¥–ª–æ–∂—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –≤ –∫–∞–Ω–∞–ª.",
        reply_markup=kb_start()
    )

async def on_get(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await show_quote(query.message.chat_id, context)

async def on_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    q = context.chat_data.get("current_quote")
    if not q:
        q = next_quote_for(query.message.chat_id)
        context.chat_data["current_quote"] = q
    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=q)
        await query.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª –≤ –∫–∞–Ω–∞–ª.", reply_markup=kb_actions())
    except Exception as e:
        await query.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª: {e}", reply_markup=kb_actions())

async def on_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    new_q = next_quote_for(query.message.chat_id)
    await show_quote(query.message.chat_id, context, quote=new_q)

async def on_reload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–Ω–æ–ø–∫–∞ ¬´–û–±–Ω–æ–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã¬ª ‚Äî –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏ —Å–±—Ä–æ—Å–∏—Ç—å –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    global QUOTES
    QUOTES = load_quotes()
    chat_state.clear()
    await query.message.reply_text(f"‚ôª –¶–∏—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í—Å–µ–≥–æ —Ç–µ–ø–µ—Ä—å {len(QUOTES)} —à—Ç.", reply_markup=kb_start())

async def reload_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /reload ‚Äî —Ç–æ –∂–µ —Å–∞–º–æ–µ, —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–æ–π."""
    global QUOTES
    QUOTES = load_quotes()
    chat_state.clear()
    await update.effective_message.reply_text(f"‚ôª –¶–∏—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í—Å–µ–≥–æ —Ç–µ–ø–µ—Ä—å {len(QUOTES)} —à—Ç.")

async def push_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /push ‚Äî —Å—Ä–∞–∑—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É –≤ –∫–∞–Ω–∞–ª."""
    q = next_quote_for(update.effective_chat.id)
    await context.bot.send_message(chat_id=CHANNEL_ID, text=q)
    await update.effective_message.reply_text("‚úÖ –¶–∏—Ç–∞—Ç–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª.")


# ===== –•–£–ö –î–õ–Ø –í–ï–ë–•–£–ö–ê (PTB —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º) =====
async def post_init(app: Application):
    base = os.getenv("WEBHOOK_BASE")
    if not base:
        raise RuntimeError("ENV WEBHOOK_BASE –Ω–µ –∑–∞–¥–∞–Ω")
    url = f"{base}/webhook/{TOKEN}"
    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ¬´—Å—Ç–∞—Ä—ã–µ¬ª –∞–ø–¥–µ–π—Ç—ã
    await app.bot.set_webhook(url=url, drop_pending_updates=True)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")


# ===== –°–ë–û–†–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====
def build_app() -> Application:
    if not TOKEN:
        raise RuntimeError("ENV TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ TOKEN=—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
    app = Application.builder().token(TOKEN).build()

    # –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ (—Ä–µ–∞–≥–∏—Ä—É–µ–º –∏ –Ω–∞ /start, –∏ –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç)
    app.add_handler(CommandHandler("start", start_like))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start_like))

    # –ö–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(on_get, pattern="^get$"))
    app.add_handler(CallbackQueryHandler(on_send, pattern="^send$"))
    app.add_handler(CallbackQueryHandler(on_change, pattern="^change$"))
    app.add_handler(CallbackQueryHandler(on_reload, pattern="^reload$"))

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("reload", reload_cmd))
    app.add_handler(CommandHandler("push", push_cmd))

    return app


# ===== –ó–ê–ü–£–°–ö =====
if __name__ == "__main__":
    QUOTES = load_quotes()
    app = build_app()

    mode = os.getenv("MODE", "polling").lower()
    if mode == "webhook":
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö—É–∫ –∏ —Å—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Ä–≤–µ—Ä –≤–µ–±—Ö—É–∫–æ–≤
        app.post_init = post_init
        port = int(os.getenv("PORT", "8080"))
        base = os.getenv("WEBHOOK_BASE")
        url = f"{base}/webhook/{TOKEN}"
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=url,
            allowed_updates=Update.ALL_TYPES,
            stop_signals=None
        )
    else:
        app.run_polling(allowed_updates=Update.ALL_TYPES)