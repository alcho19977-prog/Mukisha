import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render ‚Üí Environment) ===
TOKEN = os.getenv("TOKEN")
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE")
CHANNEL_ID = os.getenv("CHANNEL_ID")
MODE = os.getenv("MODE", "webhook").lower()
PORT = int(os.getenv("PORT", 8443))

# ==== –û–¢–õ–ê–î–ö–ê ====
print("=== DEBUG: ENV VARS ===")
print("TOKEN:", TOKEN)
print("WEBHOOK_BASE:", WEBHOOK_BASE)
print("CHANNEL_ID:", CHANNEL_ID)
print("MODE:", MODE)
print("PORT:", PORT)
print("=======================")

# –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
if not TOKEN:
    raise RuntimeError("ENV TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ TOKEN=—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞ –≤ Render ‚Üí Environment.")
if not WEBHOOK_BASE:
    raise RuntimeError("ENV WEBHOOK_BASE –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–∏–º–µ—Ä: https://mukisha.onrender.com")
if not CHANNEL_ID:
    raise RuntimeError("ENV CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–∏–º–µ—Ä: -1002701059389")

# === –ü—Ä–æ—Å—Ç–æ–π –Ω–∞–±–æ—Ä —Ü–∏—Ç–∞—Ç ===
QUOTES = [
    "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Å—á–∞—Å—Ç—å–µ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤–∞–∂–Ω–µ–µ —Ç–≤–æ–µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ. ‚Äî –•. –î–∂–µ–∫—Å–æ–Ω –ë—Ä–∞—É–Ω",
    "–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–≤—å, –∫–æ—Ç–æ—Ä—É—é –¥—É–º–∞–µ–º, —á—Ç–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ–º. ‚Äî –°—Ç–∏–≤–µ–Ω –ß–±–æ—Å–∫–∏",
    "–¢–∞–º, –≥–¥–µ –µ—Å—Ç—å –ª—é–±–æ–≤—å, –µ—Å—Ç—å –∂–∏–∑–Ω—å. ‚Äî –ú–∞—Ö–∞—Ç–º–∞ –ì–∞–Ω–¥–∏",
    "–õ—é–±–∏—Ç—å ‚Äî –∑–Ω–∞—á–∏—Ç –≤–∏–¥–µ—Ç—å —á—É–¥–æ, –Ω–µ–≤–∏–¥–∏–º–æ–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö. ‚Äî –§—Ä–∞–Ω—Å—É–∞ –ú–æ—Ä–∏–∞–∫",
    "–¢–æ–ª—å–∫–æ –≤ –ª—é–±–≤–∏ –º—ã –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Å–µ–±—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É. ‚Äî –¢–æ–º–∞—Å –ú–µ—Ä—Ç–æ–Ω",
]

current_quotes = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì© /start –ø–æ–ª—É—á–µ–Ω")
    quote = random.choice(QUOTES)
    current_quotes[update.effective_chat.id] = quote
    keyboard = [
        [InlineKeyboardButton("üì£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="send")],
        [InlineKeyboardButton("üîÅ –ü–æ–º–µ–Ω—è—Ç—å —Ü–∏—Ç–∞—Ç—É", callback_data="change")],
    ]
    await update.message.reply_text(
        f"üìú –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n\n{quote}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    await query.answer()
    print(f"üñ± –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {query.data}, chat={chat_id}")

    if query.data == "send":
        quote = current_quotes.get(chat_id)
        if quote:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=quote)
            await query.edit_message_text(f"‚úÖ –¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª:\n\n{quote}")
        else:
            await query.edit_message_text("–ù–µ—Ç —Ü–∏—Ç–∞—Ç—ã –≤ –ø–∞–º—è—Ç–∏. –ù–∞–∂–º–∏ /start.")

    elif query.data == "change":
        quote = random.choice(QUOTES)
        current_quotes[chat_id] = quote
        keyboard = [
            [InlineKeyboardButton("üì£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="send")],
            [InlineKeyboardButton("üîÅ –ü–æ–º–µ–Ω—è—Ç—å —Ü–∏—Ç–∞—Ç—É", callback_data="change")],
        ]
        await query.edit_message_text(
            f"üìú –ù–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞:\n\n{quote}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


def build_app():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    return app


if __name__ == "__main__":
    app = build_app()

    if MODE == "webhook":
        webhook_url = f"{WEBHOOK_BASE}/webhook/{TOKEN}"
        print(f"üöÄ WEBHOOK —Ä–µ–∂–∏–º. URL: {webhook_url} | PORT: {PORT}")
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TOKEN,
            webhook_url=webhook_url,
            allowed_updates=Update.ALL_TYPES
        )
    else:
        print("üöÄ POLLING —Ä–µ–∂–∏–º")
        app.run_polling(allowed_updates=Update.ALL_TYPES)